/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pf.gui;

import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import pf.Launcher;

/**
 *
 * @author      Kieran Skvortsov
 * @employee#   72141
 */
public class Settings extends javax.swing.JFrame {

    private DefaultListModel<String> dlm_planogram = new DefaultListModel<>();
    private ArrayList<String> planograms = new ArrayList();
    
    /**
     * Creates new form UI
     */
    public Settings(Component parent) {
        setLocationRelativeTo(parent);
        
        initComponents();
        init();
    }
    
    /**
     * Initializes the default values of UI to reflect the current
     * saved properties
     * 
     */
    private void init() {
        boolean uploadOnLaunch = Launcher.APP_UPLOAD_PLANOGRAMS_ON_LAUNCH;
        checkBox_uploadOnLaunch.setSelected(uploadOnLaunch);
        
        list_planograms.setModel(dlm_planogram);
        
        String planogramString = Launcher.APP_PLANOGRAMS;
        if(planogramString == null || planogramString.isEmpty() || planogramString.isBlank()) return;
        
        String[] planogramList = planogramString.split(",");
        for(String p : planogramList)
            if(!p.isBlank() && !p.isEmpty()) {
                planograms.add(p);
                dlm_planogram.add(0, p);
            }

        list_planograms.validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkBox_uploadOnLaunch = new javax.swing.JCheckBox();
        scrollPane_list_planograms = new javax.swing.JScrollPane();
        list_planograms = new javax.swing.JList<>();
        button_add = new javax.swing.JButton();
        button_remove = new javax.swing.JButton();
        button_apply = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings");

        checkBox_uploadOnLaunch.setSelected(true);
        checkBox_uploadOnLaunch.setText("Upload Planograms on Launch");

        list_planograms.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_planograms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPane_list_planograms.setViewportView(list_planograms);

        button_add.setText("Add");
        button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addActionPerformed(evt);
            }
        });

        button_remove.setText("Remove");
        button_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_removeActionPerformed(evt);
            }
        });

        button_apply.setText("Apply & Close");
        button_apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_applyActionPerformed(evt);
            }
        });

        jLabel1.setText("Planograms");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane_list_planograms, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(button_remove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkBox_uploadOnLaunch)
                        .addGap(74, 74, 74)
                        .addComponent(button_apply, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button_add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_remove)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane_list_planograms, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
                .addGap(54, 54, 54))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_apply)
                    .addComponent(checkBox_uploadOnLaunch))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Saves (writes) the settings out to a local properties file
     * 
     * @param evt 
     */
    private void button_applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_applyActionPerformed
        boolean uploadOnLaunch = checkBox_uploadOnLaunch.isSelected();
        StringBuilder sb = new StringBuilder();
        
        planograms.stream().forEach(p -> {
            sb.append(p);
            sb.append(",");
        });
        
        Launcher.writeProperties(uploadOnLaunch, sb.toString());
        
        this.dispose();
    }//GEN-LAST:event_button_applyActionPerformed

    /**
     * Opens a new file chooser allowing selection of pdf files and adds
     * their absolute paths to the list
     * 
     * @param evt 
     */
    private void button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "PDF Files", "pdf");
        fileChooser.setFileFilter(filter);
        
        int returnVal = fileChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            String path = f.getAbsolutePath();
            
            if(!planograms.contains(path)) {
                planograms.add(path);
                dlm_planogram.add(0, path);
            }
        }
    }//GEN-LAST:event_button_addActionPerformed

    /**
     * Removes the currently selected pdf file
     * 
     * @param evt 
     */
    private void button_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_removeActionPerformed
        int removalIndex = list_planograms.getSelectedIndex();
        String path = dlm_planogram.remove(removalIndex);
        
        planograms.remove(path);
    }//GEN-LAST:event_button_removeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add;
    private javax.swing.JButton button_apply;
    private javax.swing.JButton button_remove;
    private javax.swing.JCheckBox checkBox_uploadOnLaunch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> list_planograms;
    private javax.swing.JScrollPane scrollPane_list_planograms;
    // End of variables declaration//GEN-END:variables
}
