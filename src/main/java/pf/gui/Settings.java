package pf.gui;

import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import pf.UserSettings;
import pf.trackable.UnnamedException;

/**
 *
 * @author      Kieran Skvortsov
 * employee#    72141
 */
public class Settings extends javax.swing.JFrame {

    private final DefaultListModel<String> dlm_planogram = new DefaultListModel<>();
    private final ArrayList<String> planograms = new ArrayList();
    
    /**
     * Create a new Settings instance
     * 
     * @param parent The parent to set location relative to
     */
    public Settings(Component parent) {
        setLocationRelativeTo(parent);
        setAlwaysOnTop(true);
        
        initComponents();
        init();
    }
    
    /**
     * Initializes the default values of UI to reflect the current
     * saved properties
     * 
     */
    private void init() {
        trackableCheckBox_upload.setName("startup.upload");
        trackableCheckBox_download.setName("startup.download");

        trackableCheckBox_customAuth.setName("auth.custom");
        trackableTextField_username.setName("auth.username");
        trackablePasswordField_password.setName("auth.password");
        
        try {
            UserSettings.track(trackableCheckBox_upload);
            UserSettings.track(trackableCheckBox_download);
            
            UserSettings.track(trackableCheckBox_customAuth);
            UserSettings.track(trackableTextField_username);
            UserSettings.track(trackablePasswordField_password);
        } catch (UnnamedException ex) {
            System.err.println(ex);
        }
        
        list_planograms.setModel(dlm_planogram);
        
        String planogramString = UserSettings.getProperty("local.planograms");
        if(planogramString == null || planogramString.isEmpty()) return;
        
        String[] planogramList = planogramString.split(",");
        for(String p : planogramList)
            if(p != null && !p.isEmpty()) {
                planograms.add(p);
                dlm_planogram.add(0, p);
            }

        list_planograms.validate();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        panel_general = new javax.swing.JPanel();
        label_local = new javax.swing.JLabel();
        scrollPane_list_planograms = new javax.swing.JScrollPane();
        list_planograms = new javax.swing.JList<>();
        button_add = new javax.swing.JButton();
        button_remove = new javax.swing.JButton();
        panel_auth = new javax.swing.JPanel();
        trackableCheckBox_customAuth = new pf.trackable.TrackableCheckBox();
        label_username = new javax.swing.JLabel();
        trackableTextField_username = new pf.trackable.TrackableTextField();
        label_password = new javax.swing.JLabel();
        trackablePasswordField_password = new pf.trackable.TrackablePasswordField();
        label_warning = new javax.swing.JLabel();
        label_warning1 = new javax.swing.JLabel();
        panel_startup = new javax.swing.JPanel();
        label_startup = new javax.swing.JLabel();
        trackableCheckBox_upload = new pf.trackable.TrackableCheckBox();
        trackableCheckBox_download = new pf.trackable.TrackableCheckBox();
        button_apply = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings");

        label_local.setText("Local Planograms");

        list_planograms.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_planograms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPane_list_planograms.setViewportView(list_planograms);

        button_add.setText("Add");
        button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addActionPerformed(evt);
            }
        });

        button_remove.setText("Remove");
        button_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_removeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_generalLayout = new javax.swing.GroupLayout(panel_general);
        panel_general.setLayout(panel_generalLayout);
        panel_generalLayout.setHorizontalGroup(
            panel_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_generalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_local)
                    .addComponent(scrollPane_list_planograms, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_remove, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(button_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_generalLayout.setVerticalGroup(
            panel_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_generalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_local)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_generalLayout.createSequentialGroup()
                        .addComponent(button_add, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 43, Short.MAX_VALUE))
                    .addComponent(scrollPane_list_planograms, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedPane.addTab("Local", panel_general);

        trackableCheckBox_customAuth.setText("Use Custom Authentication");
        trackableCheckBox_customAuth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackableCheckBox_customAuthActionPerformed(evt);
            }
        });

        label_username.setForeground(new java.awt.Color(153, 153, 153));
        label_username.setText("Username");

        label_password.setForeground(new java.awt.Color(153, 153, 153));
        label_password.setText("Password");

        label_warning.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        label_warning.setForeground(new java.awt.Color(153, 153, 153));
        label_warning.setText("Warning: saved locally as plaintext");

        label_warning1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        label_warning1.setForeground(new java.awt.Color(153, 153, 153));
        label_warning1.setText("Warning: saved locally as plaintext");

        javax.swing.GroupLayout panel_authLayout = new javax.swing.GroupLayout(panel_auth);
        panel_auth.setLayout(panel_authLayout);
        panel_authLayout.setHorizontalGroup(
            panel_authLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_authLayout.createSequentialGroup()
                .addGroup(panel_authLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_authLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(trackableCheckBox_customAuth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_authLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(panel_authLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label_username)
                            .addComponent(label_password)
                            .addComponent(trackableTextField_username, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(trackablePasswordField_password, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_authLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_warning)
                            .addComponent(label_warning1))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        panel_authLayout.setVerticalGroup(
            panel_authLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_authLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trackableCheckBox_customAuth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_username)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_authLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trackableTextField_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_warning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_password)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_authLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trackablePasswordField_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_warning1))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Authentication", panel_auth);

        label_startup.setText("Startup Behaviors");

        trackableCheckBox_upload.setText("Upload Local Planograms");

        trackableCheckBox_download.setText("Download Remote Planograms");

        javax.swing.GroupLayout panel_startupLayout = new javax.swing.GroupLayout(panel_startup);
        panel_startup.setLayout(panel_startupLayout);
        panel_startupLayout.setHorizontalGroup(
            panel_startupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_startupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_startupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_startup)
                    .addComponent(trackableCheckBox_upload, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trackableCheckBox_download, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(197, Short.MAX_VALUE))
        );
        panel_startupLayout.setVerticalGroup(
            panel_startupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_startupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_startup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trackableCheckBox_upload, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trackableCheckBox_download, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Startup", panel_startup);

        button_apply.setText("Apply & Close");
        button_apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_applyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_apply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_apply, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Saves (writes) the settings out to a local properties file
     * 
     * @param evt 
     */
    private void button_applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_applyActionPerformed
        UserSettings.save();
        this.dispose();
    }//GEN-LAST:event_button_applyActionPerformed

    /**
     * Opens a new file chooser allowing selection of pdf files and adds
     * their absolute paths to the list
     * 
     * @param evt 
     */
    private void button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "PDF Files", "pdf");
        fileChooser.setFileFilter(filter);
        
        int returnVal = fileChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            String path = f.getAbsolutePath();
            
            if(!planograms.contains(path)) {
                planograms.add(path);
                dlm_planogram.add(0, path);
            }
        }
    }//GEN-LAST:event_button_addActionPerformed

    /**
     * Removes the currently selected pdf file
     * 
     * @param evt 
     */
    private void button_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_removeActionPerformed
        int removalIndex = list_planograms.getSelectedIndex();
        String path = dlm_planogram.remove(removalIndex);
        
        planograms.remove(path);
    }//GEN-LAST:event_button_removeActionPerformed

    private void trackableCheckBox_customAuthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackableCheckBox_customAuthActionPerformed
        boolean customAuth = trackableCheckBox_customAuth.isSelected();
        
        trackableTextField_username.setEnabled(customAuth);
        trackablePasswordField_password.setEnabled(customAuth);
    }//GEN-LAST:event_trackableCheckBox_customAuthActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add;
    private javax.swing.JButton button_apply;
    private javax.swing.JButton button_remove;
    private javax.swing.JLabel label_local;
    private javax.swing.JLabel label_password;
    private javax.swing.JLabel label_startup;
    private javax.swing.JLabel label_username;
    private javax.swing.JLabel label_warning;
    private javax.swing.JLabel label_warning1;
    private javax.swing.JList<String> list_planograms;
    private javax.swing.JPanel panel_auth;
    private javax.swing.JPanel panel_general;
    private javax.swing.JPanel panel_startup;
    private javax.swing.JScrollPane scrollPane_list_planograms;
    private javax.swing.JTabbedPane tabbedPane;
    private pf.trackable.TrackableCheckBox trackableCheckBox_customAuth;
    private pf.trackable.TrackableCheckBox trackableCheckBox_download;
    private pf.trackable.TrackableCheckBox trackableCheckBox_upload;
    private pf.trackable.TrackablePasswordField trackablePasswordField_password;
    private pf.trackable.TrackableTextField trackableTextField_username;
    // End of variables declaration//GEN-END:variables
}
